#!/usr/bin/env bash

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

echo "checking git version"
command -v git > /dev/null
if [[ $? == 0 ]]
then
    vercomp $(git --version | awk '{print $3}') 2.13.0
    if [[ $? == '<' ]]
    then
        echo "git must be of version 2.13.0 or higher"
        exit 1
    else
        echo "git version OK"
    fi
else
    echo "could not detect git command"
    exit 1
fi

echo "checking docker-compose version"
command -v docker-compose > /dev/null
if [[ $? == 0 ]]
then
    echo "docker-compose version OK"
else
    echo "docker-compose version NOT OK"
    exit 1
fi

echo "checking ssh identity"
command -v ssh > /dev/null
if [[ $? == 0 ]]
then
    ssh -T git@gitlab.com
    if [[ $? != 0 ]]
    then
        echo "Please add your ssh key to your gitlab account"
        exit 1
    else
        echo "ssh installation OK"
    fi
else
    echo "ssh installation NOT OK"
    exit 1
fi

echo "cloning repositories ..."
git clone --recurse-submodules git@gitlab.com:youngsource/calculators.git

cd calculators

echo "scaffolding ignored files"
cp .docker.env.example .docker.env
cp .docker.env.example .env
cp .docker.env.example node/.env

echo "building docker images"
docker-compose build

if [[ $? == 0 ]]
then
    echo "The docker image was succesfully built. Run the app with the command 'docker-compose up' in the project root"
fi
exit $?
